@model Proyecto.Models.Requerimiento

@{
    /**/

    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

<fieldset>
    <div class="form-group">
        Filtrar por Proyecto
    </div>
    <div class="editor-field">
        <form action="/Requerimiento/Create" method="post">
            @if ((string)System.Web.HttpContext.Current.Session["rol"] == "Cliente")
            {
                @Html.DropDownList("nombreProyecto", ((Proyecto.Controllers.RequerimientoController)this.ViewContext.Controller).getProyectos("Cliente", (string)System.Web.HttpContext.Current.Session["cedula"]), "Seleccione un Proyecto", new { name = "nombreProyecto" })
            }
            else if ((string)System.Web.HttpContext.Current.Session["rol"] == "Jefe")
            {
                @Html.DropDownList("nombreProyecto", ((Proyecto.Controllers.RequerimientoController)this.ViewContext.Controller).getProyectos("Jefe", (string)System.Web.HttpContext.Current.Session["cedula"]), "Seleccione un Proyecto", new { name = "nombreProyecto" })
            }
            else
            {
                @Html.DropDownList("nombreProyecto", ((Proyecto.Controllers.RequerimientoController)this.ViewContext.Controller).getProyectos("Empleado", (string)System.Web.HttpContext.Current.Session["cedula"]), "Seleccione un Proyecto", new { name = "nombreProyecto" })
            }

            <div class="form-group">
                Filtrar por Modelos
            </div>

            <div>
                <select id="nombreModulo" name="nombreModulo">Seleccione Modulo</select>
            </div>

            <br></br>

            @Html.LabelFor(model => model.nombre, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.nombre, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.nombre, "", new { @class = "text-danger" })
            </div>

            <br></br>

            @Html.LabelFor(model => model.duracionEstimada, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.duracionEstimada, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.duracionEstimada, "", new { @class = "text-danger" })
            </div>

            <br></br>

            @Html.LabelFor(model => model.duracionReal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.duracionReal, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.duracionReal, "", new { @class = "text-danger" })
            </div>


            @*
        @Html.LabelFor(model => model.estado, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.estado, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.estado, "", new { @class = "text-danger" })
        </div>
            *@

            <br></br>

            <div class="form-group">
                Responsable
            </div>

            <div>
                <select id="miembro" name="miembro">Seleccione responsable</select>
            </div>

            <br></br>

            @Html.LabelFor(model => model.complejidad, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @if (TempData["Complejidad"] != null)
                {
                    @Html.DropDownList("complejidad", new SelectList(TempData["Complejidad"] as List<string>), "----------")
                }
            </div>

            <br></br>

            <p>
                <input type="submit" value="Crear" class="btn btn-success" />
            </p>
        </form>
    </div>

</fieldset>
    }






<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}




@*Script para pasarle por parametro el resultado del primer dropdown al segundo de proyecto a modulo*@
<script src="~/Scripts/jquery-1.10.2.js"></script>
<script>
    $(document).ready(function () {
        $("#nombreModulo").prop("disabled", true);//se desactiva el primer drowpdown mientras se trabaja esto

        $("#nombreProyecto").change(function () {

            if ($("#nombreProyecto").val() != "Seleccione un Proyecto") {//si esta el valor default del primer dropdown no se hace nada

                var ModulosProyecto = {};

                ModulosProyecto.url = "/Requerimiento/getModulos";//se llenara segunda dropdownlist con lo q devuelva el metodo getmodulos
                ModulosProyecto.type = "POST";
                ModulosProyecto.data = JSON.stringify({
                    nombreProyecto: $("#nombreProyecto").val()//parametro q se pasa
                });
                ModulosProyecto.datatype = "json";
                ModulosProyecto.contentType = "application/json";
                ModulosProyecto.success = function (data) {//datos q retorna getmodulo

                    $("#nombreModulo").empty();
                    for (var i = 0; i < data.length; i++) {
                        $("#nombreModulo").append("<option>" + data[i].Text + "</option>");//retorna objetos JSON que hay q abrir con .text
                    }
                    $("#nombreModulo").prop("disabled", false);
                };

                ModulosProyecto.error = function () {
                    alert("Error obteniendo los modulos");
                };

                $.ajax(ModulosProyecto);
            } else {
                $("#nombreModulo").empty();
                $("#nombreModulo").prop("disabled", true);
            }
        });
    });
</script>




@*Script para pasarle por parametro el resultado del primer dropdown al segundo proyecto a equipo*@
<script src="~/Scripts/jquery-1.10.2.js"></script>
<script>
    $(document).ready(function () {
        $("#miembro").prop("disabled", true);//se desactiva el primer drowpdown mientras se trabaja esto

        $("#nombreProyecto").change(function () {

            if ($("#nombreProyecto").val() != "Seleccione un Proyecto") {//si esta el valor default del primer dropdown no se hace nada

                var ModulosProyecto = {};

                ModulosProyecto.url = "/Requerimiento/getEmpleadosProyecto";//se llenara segunda dropdownlist con lo q devuelva el metodo getmodulos
                ModulosProyecto.type = "POST";
                ModulosProyecto.data = JSON.stringify({
                    nombreProyecto: $("#nombreProyecto").val()//parametro q se pasa
                });
                ModulosProyecto.datatype = "json";
                ModulosProyecto.contentType = "application/json";
                ModulosProyecto.success = function (data) {//datos q retorna getmodulo

                    $("#miembro").empty();
                    for (var i = 0; i < data.length; i++) {
                        $("#miembro").append("<option>" + data[i].Text + "</option>");//retorna objetos JSON que hay q abrir con .text
                    }
                    $("#miembro").prop("disabled", false);
                };

                ModulosProyecto.error = function () {
                    alert("Error obteniendo los modulos");
                };

                $.ajax(ModulosProyecto);
            } else {
                $("#miembro").empty();
                $("#miembro").prop("disabled", true);
            }
        });
    });
</script>