@model Proyecto.Models.Equipo 

@{

    ViewBag.Title = "Asignar Equipo"; @*Titulo que esta en el estandar *@
}

<h2>@ViewBag.Title</h2>


@*Se utiliza para escribir el nombre del proyecto*@
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.nombreEquipo, "Nombre de Equipo *", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10" required>@*Hace que este espacio tenga que ser llenado para continuar*@
            @Html.EditorFor(model => model.nombreEquipo, new { htmlAttributes = new { @class = "form-control", required = "required" } })
            @Html.ValidationMessageFor(model => model.nombreEquipo, "", new { @class = "text-danger" })
        </div>
    </div>
    @*Es el codigo de los botones regresar y crear*@
    <p class="botones text-center ">
        <input type="submit" value="Crear" class="btn btn-success" />
        @Html.ActionLink("Regresar", "Index", null, new { @class = "btn btn-default btn-large" })
    </p>
    @*Comentario de apoyo para ayudarle al usuario que tiene que hacer*@
    <p align="center">Para asignar empleados a un proyecto por favor arrastrar de empleados disponibles a empleados asignados</p>
</div>
}


@*Permite a la columna de la derecha poderse ordenar y recibir empleados de la columna de la izquierda*@
<script>
    $(document).ready(function () {
        $("#asignacion").sortable();
    })
</script>

@*Codigo aportado por el grupo #1*@
@*Permite a la columna de la izquierda poderse ordenar y a su vez permite arrastrar el empleado a la columna de la derecha*@
<script>
    $(document).ready(function () {
        $("#disponibilidad").sortable({
            connectWith: "#asignacion",
            update: function (event, ui) {
                var itemIds = "";
                $("disponibilidad").find(".taskSingleInline").each(function () {
                    var itemId = $(this).attr("data-taskid");
                    itemIds = itemIds + itemId + ",";
                });
                $.ajax({
                    url: '@Url.Action("UpdateItem", "Equipo")',
                    data: { itemIds: itemIds },
                    type: 'POST',
                    success: function (data) {
                    },
                    error: function (xhr, status, error) {
                    }
                });
            }
        });
    })
</script>


@*Codigo de los estilos de la lista y de las etiquetas arriba de estas*@
<style>
    #sortable tr:hover {
        background-color: #0094ff;
        color: #fff;
        margin: 20px;
    }
</style>

<style>
    #sortable2 tr:hover {
        background-color: #0094ff;
        color: #fff;
        margin: 20px;
    }
</style>

<style>
    tbody {
        float: left;
        width: 50px;
        height: 250px;
    }
</style>


<div class="modal-body row">
    <div class=".col-6 .col-sm-4">
        @*Estilo para la letra de arriba de la columna*@
        <p style="font-size:14px; color:#b3b0d5; font-weight:bold; font-style:italic;"> Desarrolladores disponibles</p>
        <p></p>
        @*Tabla que se encuentra arriba de las listas y despliega la etiqueta con cedula y nombre*@
        <table class="table table-responsive-md">
            <thead class="thead-light">
                <tr>
                    <th>Cédula</th>
                    <th>Nombre</th>
                </tr>
            </thead>
            <tbody id="disponibilidad" style="cursor:pointer;">
                @*Id es lo que reconoce el script de mas arriba*@
                @*Listado de los desarrolladores disponibles *@
                @if (TempData["empleadosDisponibles"] != null)
                {
                    foreach (var item in TempData["empleadosDisponibles"] as List<Proyecto.Models.EmpleadoDesarrollador>)
                    {
                        <tr>
                            <td>
                                <a href="@Url.Action("Details","EmpleadoDesarrollador", new {id = item.cedulaED})"><i>@item.cedulaED</i></a> @*Hace que a la cedula se le pueda hacer click para llevar a la consulta del empleado*@

                            </td>
                            <td class=" taskSingleInline" id="task@(item.cedulaED)" data-taskid="@(item.cedulaED)">
                                <a href="@Url.Action("Details","EmpleadoDesarrollador", new {id = item.cedulaED})"><i>@item.nombreED</i></a>  @*Hace que al nombre se le pueda hacer click para llevar a la consulta del empleado*@
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <div class="col">
    </div>
    <div class=".col-6 .col-sm-4">
        @*Estilo para la letra de arriba de la columna*@
        <p style="font-size:14px; color:#538b01; font-weight:bold; font-style:italic;"> Empleados Asignados</p>

        <table class="table table-responsive-md">

            <thead class="thead-light">
                <tr>
                    <th>Cédula</th>
                    <th>Nombre</th>
                </tr>
            </thead>
            <tbody id="asignacion" style="cursor:pointer;">
                @*Id que identifica en los scripts de arriba*@
                @*Lista de la derecha de los empleados que ya estan asignados a un proyecto*@
                @if (TempData["empleadosAsignados"] != null)
                {
                    foreach (var item in TempData["empleadosAsignados"] as List<Proyecto.Models.EmpleadoDesarrollador>)
                    {
                        <tr>
                            <td>
                                <a href="@Url.Action("Details","EmpleadoDesarrollador", new { cedula = item.cedulaED })"><i>@item.cedulaED</i></a>
                            </td>
                            <td class="taskSingleInline" id="task@(item.cedulaED)" data-taskid="@(item.cedulaED)">
                              
                                <a href="@Url.Action("Details","EmpleadoDesarrollador", new { cedula = item.cedulaED })"><i>@item.nombreED</i></a>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>
